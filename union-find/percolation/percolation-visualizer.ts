import { Percolation } from './percolation'
import fs from 'fs'

export default class PercolationVisualizer {
  // Delay in ms - controls the animation speed
  // private readonly _delay: 100

  // Draw n-by-n percolation system
  draw(_system?: Percolation, _gridSize?: number): void {
    const canvas = new HTMLCanvasElement()
    const ctx    = canvas.getContext('2d')

    // ctx!.strokeStyle = 'black'
    // ctx!.lineWidth   = 4
    // ctx!.fillRect(0, 0, canvas.width, canvas.height)
    ctx!.fillRect(25, 25, 100, 100)
    ctx!.clearRect(45, 45, 60, 60)
    ctx!.strokeRect(50, 50, 50, 50)

    // let opened = 0
    // for (let row = 1; row <= gridSize; row++) {
    //   for (let column = 0; column <= gridSize; column++) {
    //     if (system.isFull(row, column)) {
    //       // draw full
    //       opened++
    //     } else if (system.isOpen(row, column)) {
    //       // draw open
    //       opened++
    //     } else {
    //       // draw blank
    //     }
    //   }
    // }

    // Write status text

    // Save Visualization to disk
    // String generated by canvas.toDataURL()
    const image = canvas.toDataURL("image/png")
    // Strip off the data: url prefix to get just the base64-encoded bytes
    const data = image.replace(/^data: image\/\w+;base64,/, "")
    const buf  = new Buffer(data, 'base64')
    fs.writeFile('./test/image.png', buf)
  }

  async visualize(fileName: string): Promise<void> {
    // Get file from disk
    const filePath = `./test-data/${fileName}.txt`
    // const response = await fetch(filePath)
    // const file = await response.blob()

    // // Read file data
    // let text: string
    // const reader = new FileReader()
    // reader.onload = () => {
    //   try { text = reader.result }
    //   catch (error) { throw new Error(`An error occurred: ${error}`) }
    // }
    // reader.readAsText(file)

    let text
    try { text = fs.readFileSync(filePath, 'utf-8') }
    catch (error) { throw new Error(`Error reading file from disk: ${error}`) }

    // Get grid size, init grid, first canvas draw
    const input    = text!.split('\n')
    const gridSize = Number(input[0])
    const system   = new Percolation(gridSize)
    this.draw(system, gridSize)

    // Repeatedly read in sites to open and draw resulting system
    for (let i = 1, len = input.length; i < len; i++) {
      const row    = Number(input[i].split(' ')[0])
      const column = Number(input[i].split(' ')[1])
      system.open(row, column)
      this.draw(system, gridSize)
    }

  }
}